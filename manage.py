#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞
"""

import os
import sys
import time
import signal
import subprocess
import argparse
import json
from pathlib import Path
from datetime import datetime

class SystemController:
    def __init__(self):
        self.workspace = Path("/workspace")
        self.pid_file = self.workspace / "bot.pid"
        self.log_dir = self.workspace / "logs"
        self.log_dir.mkdir(exist_ok=True)
        
    def get_pid(self):
        """–ü–æ–ª—É—á–∞–µ—Ç PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.pid_file.exists():
            try:
                with open(self.pid_file, 'r') as f:
                    pid = int(f.read().strip())
                return pid
            except (ValueError, IOError):
                return None
        return None
    
    def save_pid(self, pid):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç PID –≤ —Ñ–∞–π–ª"""
        with open(self.pid_file, 'w') as f:
            f.write(str(pid))
    
    def remove_pid(self):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª PID"""
        if self.pid_file.exists():
            self.pid_file.unlink()
    
    def is_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å"""
        pid = self.get_pid()
        if pid is None:
            return False
        
        try:
            os.kill(pid, 0)
            return True
        except OSError:
            return False
    
    def start(self, background=True):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É"""
        if self.is_running():
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            if background:
                # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                process = subprocess.Popen([
                    sys.executable, "run_background.py"
                ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                time.sleep(2)
                
                if process.poll() is None:
                    self.save_pid(process.pid)
                    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (PID: {process.pid})")
                    return True
                else:
                    stdout, stderr = process.communicate()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {stderr.decode()}")
                    return False
            else:
                # –ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                
                process = subprocess.Popen([
                    sys.executable, "main.py"
                ])
                
                try:
                    process.wait()
                except KeyboardInterrupt:
                    process.terminate()
                    process.wait()
                    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É"""
        if not self.is_running():
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        pid = self.get_pid()
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã (PID: {pid})...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
            os.kill(pid, signal.SIGTERM)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for i in range(10):
                time.sleep(1)
                if not self.is_running():
                    break
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            if self.is_running():
                print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                os.kill(pid, signal.SIGKILL)
                time.sleep(1)
            
            if not self.is_running():
                self.remove_pid()
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    def restart(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
        
        if self.stop():
            time.sleep(2)
            return self.start()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            return False
    
    def status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if self.is_running():
            pid = self.get_pid()
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ (PID: {pid})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                import psutil
                process = psutil.Process(pid)
                print(f"   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.fromtimestamp(process.create_time())}")
                print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {process.cpu_percent()}%")
                print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {process.memory_info().rss / 1024 / 1024:.1f} MB")
            except ImportError:
                print("   psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
        if self.log_dir.exists():
            log_files = list(self.log_dir.glob("*.log"))
            if log_files:
                print(f"\nüìÅ –õ–æ–≥ —Ñ–∞–π–ª—ã:")
                for log_file in sorted(log_files, key=lambda x: x.stat().st_mtime, reverse=True):
                    size = log_file.stat().st_size
                    mtime = datetime.fromtimestamp(log_file.stat().st_mtime)
                    print(f"   {log_file.name}: {size} bytes, –∏–∑–º–µ–Ω–µ–Ω {mtime}")
    
    def logs(self, lines=50, follow=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏"""
        main_log = self.log_dir / "main.log"
        
        if not main_log.exists():
            print("‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if follow:
            print(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏):")
            try:
                subprocess.run(["tail", "-f", str(main_log)])
            except KeyboardInterrupt:
                print("\n‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:")
            try:
                result = subprocess.run(
                    ["tail", "-n", str(lines), str(main_log)],
                    capture_output=True, text=True
                )
                print(result.stdout)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            result = subprocess.run([
                sys.executable, "test_system.py"
            ], capture_output=True, text=True)
            
            print(result.stdout)
            if result.stderr:
                print("–û—à–∏–±–∫–∏:", result.stderr)
            
            return result.returncode == 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            return False
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
            if self.log_dir.exists():
                for log_file in self.log_dir.glob("*.log.*"):
                    if log_file.stat().st_size > 10 * 1024 * 1024:  # > 10MB
                        log_file.unlink()
                        print(f"   –£–¥–∞–ª–µ–Ω –±–æ–ª—å—à–æ–π –ª–æ–≥: {log_file.name}")
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_files = list(self.workspace.glob("*.tmp"))
            for temp_file in temp_files:
                temp_file.unlink()
                print(f"   –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file.name}")
            
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞")
    parser.add_argument("command", choices=[
        "start", "stop", "restart", "status", "logs", "test", "cleanup"
    ], help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    parser.add_argument("--foreground", "-f", action="store_true",
                       help="–ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    parser.add_argument("--lines", "-n", type=int, default=50,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞")
    parser.add_argument("--follow", "-F", action="store_true",
                       help="–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    args = parser.parse_args()
    
    controller = SystemController()
    
    if args.command == "start":
        controller.start(background=not args.foreground)
    elif args.command == "stop":
        controller.stop()
    elif args.command == "restart":
        controller.restart()
    elif args.command == "status":
        controller.status()
    elif args.command == "logs":
        controller.logs(lines=args.lines, follow=args.follow)
    elif args.command == "test":
        controller.test()
    elif args.command == "cleanup":
        controller.cleanup()

if __name__ == "__main__":
    main()