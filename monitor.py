#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import time
import psutil
import threading
from datetime import datetime, timedelta
from pathlib import Path
import json

class PerformanceMonitor:
    def __init__(self, log_file="/workspace/logs/performance.log"):
        self.log_file = Path(log_file)
        self.log_file.parent.mkdir(exist_ok=True)
        self.monitoring = False
        self.monitor_thread = None
        self.start_time = datetime.now()
        self.metrics = {
            'cpu_usage': [],
            'memory_usage': [],
            'disk_usage': [],
            'network_io': [],
            'process_count': []
        }
        
    def start_monitoring(self, interval=30):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if self.monitoring:
            return
            
        self.monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, args=(interval,), daemon=True)
        self.monitor_thread.start()
        print(f"üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")
        
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def _monitor_loop(self, interval):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring:
            try:
                self._collect_metrics()
                time.sleep(interval)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                time.sleep(interval)
                
    def _collect_metrics(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        timestamp = datetime.now()
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        self.metrics['cpu_usage'].append({
            'timestamp': timestamp.isoformat(),
            'value': cpu_percent
        })
        
        # Memory
        memory = psutil.virtual_memory()
        self.metrics['memory_usage'].append({
            'timestamp': timestamp.isoformat(),
            'value': memory.percent,
            'available': memory.available,
            'total': memory.total
        })
        
        # Disk
        disk = psutil.disk_usage('/')
        self.metrics['disk_usage'].append({
            'timestamp': timestamp.isoformat(),
            'value': disk.percent,
            'free': disk.free,
            'total': disk.total
        })
        
        # Network
        network = psutil.net_io_counters()
        self.metrics['network_io'].append({
            'timestamp': timestamp.isoformat(),
            'bytes_sent': network.bytes_sent,
            'bytes_recv': network.bytes_recv
        })
        
        # Process count
        process_count = len(psutil.pids())
        self.metrics['process_count'].append({
            'timestamp': timestamp.isoformat(),
            'value': process_count
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        max_records = 1000
        for key in self.metrics:
            if len(self.metrics[key]) > max_records:
                self.metrics[key] = self.metrics[key][-max_records:]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self._log_critical_values(timestamp, cpu_percent, memory.percent, disk.percent)
        
    def _log_critical_values(self, timestamp, cpu, memory, disk):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        critical = False
        message = f"[{timestamp.strftime('%Y-%m-%d %H:%M:%S')}] "
        
        if cpu > 80:
            message += f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu:.1f}% "
            critical = True
            
        if memory > 80:
            message += f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {memory:.1f}% "
            critical = True
            
        if disk > 90:
            message += f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk:.1f}% "
            critical = True
            
        if critical:
            print(message)
            self._write_log(message)
            
    def _write_log(self, message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        try:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(message + '\n')
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
            
    def get_current_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # Memory
            memory = psutil.virtual_memory()
            
            # Disk
            disk = psutil.disk_usage('/')
            
            # Network
            network = psutil.net_io_counters()
            
            # Process info
            process_count = len(psutil.pids())
            
            # Uptime
            uptime = datetime.now() - self.start_time
            
            return {
                'timestamp': datetime.now().isoformat(),
                'cpu': {
                    'percent': cpu_percent,
                    'count': psutil.cpu_count(),
                    'freq': psutil.cpu_freq()._asdict() if psutil.cpu_freq() else None
                },
                'memory': {
                    'percent': memory.percent,
                    'available': memory.available,
                    'total': memory.total,
                    'used': memory.used
                },
                'disk': {
                    'percent': disk.percent,
                    'free': disk.free,
                    'total': disk.total,
                    'used': disk.used
                },
                'network': {
                    'bytes_sent': network.bytes_sent,
                    'bytes_recv': network.bytes_recv,
                    'packets_sent': network.packets_sent,
                    'packets_recv': network.packets_recv
                },
                'processes': {
                    'count': process_count,
                    'uptime': str(uptime)
                }
            }
        except Exception as e:
            return {'error': str(e)}
            
    def get_metrics_summary(self, hours=24):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        
        summary = {}
        for key, values in self.metrics.items():
            recent_values = [
                v for v in values 
                if datetime.fromisoformat(v['timestamp']) > cutoff_time
            ]
            
            if recent_values:
                if 'value' in recent_values[0]:
                    # –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    values_list = [v['value'] for v in recent_values]
                    summary[key] = {
                        'count': len(values_list),
                        'min': min(values_list),
                        'max': max(values_list),
                        'avg': sum(values_list) / len(values_list)
                    }
                else:
                    # –°–ª–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (memory, disk, network)
                    summary[key] = {
                        'count': len(recent_values),
                        'latest': recent_values[-1]
                    }
                    
        return summary
        
    def export_metrics(self, filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–∞–π–ª"""
        if filename is None:
            filename = f"/workspace/metrics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
        try:
            export_data = {
                'export_timestamp': datetime.now().isoformat(),
                'monitoring_start': self.start_time.isoformat(),
                'current_status': self.get_current_status(),
                'metrics_summary': self.get_metrics_summary(),
                'raw_metrics': self.metrics
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
                
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return None
            
    def cleanup_old_metrics(self, days_to_keep=7):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        cutoff_time = datetime.now() - timedelta(days=days_to_keep)
        
        cleaned_count = 0
        for key, values in self.metrics.items():
            original_count = len(values)
            self.metrics[key] = [
                v for v in values 
                if datetime.fromisoformat(v['timestamp']) > cutoff_time
            ]
            cleaned_count += original_count - len(self.metrics[key])
            
        if cleaned_count > 0:
            print(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫")
            
    def print_status(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–Ω—Å–æ–ª—å"""
        status = self.get_current_status()
        
        if 'error' in status:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status['error']}")
            return
            
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
        print("="*60)
        
        # CPU
        print(f"üñ•Ô∏è  CPU: {status['cpu']['percent']:.1f}% "
              f"({status['cpu']['count']} —è–¥–µ—Ä)")
        
        # Memory
        memory_mb = status['memory']['used'] / 1024 / 1024
        memory_total_mb = status['memory']['total'] / 1024 / 1024
        print(f"üíæ RAM: {status['memory']['percent']:.1f}% "
              f"({memory_mb:.0f}MB / {memory_total_mb:.0f}MB)")
        
        # Disk
        disk_gb = status['disk']['used'] / 1024 / 1024 / 1024
        disk_total_gb = status['disk']['total'] / 1024 / 1024 / 1024
        print(f"üíø –î–∏—Å–∫: {status['disk']['percent']:.1f}% "
              f"({disk_gb:.1f}GB / {disk_total_gb:.1f}GB)")
        
        # Network
        network_mb = status['network']['bytes_sent'] / 1024 / 1024
        network_recv_mb = status['network']['bytes_recv'] / 1024 / 1024
        print(f"üåê –°–µ—Ç—å: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {network_mb:.1f}MB, "
              f"–ü–æ–ª—É—á–µ–Ω–æ {network_recv_mb:.1f}MB")
        
        # Processes
        print(f"‚öôÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å—ã: {status['processes']['count']}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['processes']['uptime']}")
        
        print("="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--interval", "-i", type=int, default=30,
                       help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--duration", "-d", type=int, default=0,
                       help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)")
    parser.add_argument("--export", "-e", action="store_true",
                       help="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
    parser.add_argument("--status", "-s", action="store_true",
                       help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å")
    
    args = parser.parse_args()
    
    monitor = PerformanceMonitor()
    
    if args.status:
        monitor.print_status()
        return
        
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        monitor.start_monitoring(args.interval)
        
        if args.duration > 0:
            print(f"‚è±Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å {args.duration} –º–∏–Ω—É—Ç")
            time.sleep(args.duration * 60)
        else:
            print("‚è±Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            while True:
                time.sleep(1)
                
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        monitor.stop_monitoring()
        
        if args.export:
            monitor.export_metrics()
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        monitor.print_status()

if __name__ == "__main__":
    main()