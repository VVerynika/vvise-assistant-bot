#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ë–æ—Ç-–ü–æ–º–æ—â–Ω–∏–∫–∞
"""

import os
import json
import time
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import threading

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from problem_analyzer import ProblemAnalyzer
    from monitor import PerformanceMonitor
    from config import ConfigManager
except ImportError as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –±–µ–∑ –º–æ–¥—É–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞")

class BotAssistantHandler(BaseHTTPRequestHandler):
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, *args, **kwargs):
        self.analyzer = None
        self.monitor = None
        self.config = None
        super().__init__(*args, **kwargs)
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not self.analyzer:
                self.analyzer = ProblemAnalyzer()
            if not self.monitor:
                self.monitor = PerformanceMonitor()
            if not self.config:
                self.config = ConfigManager()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    
    def do_GET(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            self.initialize_components()
            
            parsed_url = urlparse(self.path)
            path = parsed_url.path
            
            if path == '/':
                self.serve_index()
            elif path == '/health':
                self.serve_health()
            elif path == '/status':
                self.serve_status()
            elif path == '/api/status':
                self.serve_api_status()
            elif path == '/api/metrics':
                self.serve_api_metrics()
            elif path == '/api/problems':
                self.serve_api_problems()
            elif path.startswith('/static/'):
                self.serve_static_file(path)
            else:
                self.serve_404()
                
        except Exception as e:
            self.send_error(500, f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def serve_index(self):
        """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        try:
            with open('static/index.html', 'r', encoding='utf-8') as f:
                content = f.read()
            
            self.send_response(200)
            self.send_header('Content-Type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(content.encode('utf-8'))
        except FileNotFoundError:
            self.serve_simple_index()
    
    def serve_simple_index(self):
        """–û—Ç–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ index.html –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        html = """
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ë–æ—Ç-–ü–æ–º–æ—â–Ω–∏–∫ - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .header { text-align: center; margin-bottom: 30px; }
                .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
                .status-card { background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007bff; }
                .status-card h3 { margin-top: 0; color: #007bff; }
                .metric { display: flex; justify-content: space-between; margin: 10px 0; }
                .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
                .btn:hover { background: #0056b3; }
                .btn-danger { background: #dc3545; }
                .btn-warning { background: #ffc107; color: black; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>ü§ñ –ë–æ—Ç-–ü–æ–º–æ—â–Ω–∏–∫</h1>
                    <p>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º</p>
                </div>
                
                <div class="status-grid">
                    <div class="status-card">
                        <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                        <div id="system-status">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    </div>
                    
                    <div class="status-card">
                        <h3>üíª –†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã</h3>
                        <div id="system-resources">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    </div>
                    
                    <div class="status-card">
                        <h3>üîç –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h3>
                        <div id="components-status">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    </div>
                </div>
                
                <div style="text-align: center;">
                    <button class="btn" onclick="refreshData()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
                    <button class="btn btn-warning" onclick="restartSystem()">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</button>
                    <button class="btn btn-danger" onclick="stopSystem()">üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                </div>
                
                <div id="logs" style="margin-top: 30px; background: #f8f9fa; padding: 20px; border-radius: 8px;">
                    <h3>üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</h3>
                    <div id="log-content">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
                </div>
            </div>
            
            <script>
                function refreshData() {
                    fetch('/api/status')
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById('system-status').innerHTML = `
                                <div class="metric"><span>–°—Ç–∞—Ç—É—Å:</span> <strong>${data.status}</strong></div>
                                <div class="metric"><span>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span> <strong>${data.uptime}</strong></div>
                                <div class="metric"><span>–í–µ—Ä—Å–∏—è:</span> <strong>${data.version}</strong></div>
                            `;
                            
                            document.getElementById('system-resources').innerHTML = `
                                <div class="metric"><span>CPU:</span> <strong>${data.metrics.cpu}%</strong></div>
                                <div class="metric"><span>RAM:</span> <strong>${data.metrics.memory}%</strong></div>
                                <div class="metric"><span>–î–∏—Å–∫:</span> <strong>${data.metrics.disk}%</strong></div>
                            `;
                            
                            document.getElementById('components-status').innerHTML = `
                                <div class="metric"><span>Slack:</span> <strong>${data.components.slack}</strong></div>
                                <div class="metric"><span>ClickUp:</span> <strong>${data.components.clickup}</strong></div>
                                <div class="metric"><span>Telegram:</span> <strong>${data.components.telegram}</strong></div>
                            `;
                        });
                    
                    fetch('/api/metrics')
                        .then(response => response.json())
                        .then(data => {
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏
                            let logContent = '';
                            if (data.recent_logs) {
                                data.recent_logs.forEach(log => {
                                    logContent += `<div style="margin: 5px 0; padding: 5px; background: white; border-radius: 3px;">${log}</div>`;
                                });
                            }
                            document.getElementById('log-content').innerHTML = logContent || '–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
                        });
                }
                
                function restartSystem() {
                    if (confirm('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É?')) {
                        fetch('/api/restart', {method: 'POST'})
                            .then(() => {
                                alert('–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
                                setTimeout(refreshData, 5000);
                            });
                    }
                }
                
                function stopSystem() {
                    if (confirm('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É?')) {
                        fetch('/api/stop', {method: 'POST'})
                            .then(() => {
                                alert('–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
                            });
                    }
                }
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                setInterval(refreshData, 30000);
                
                // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                document.addEventListener('DOMContentLoaded', refreshData);
            </script>
        </body>
        </html>
        """
        
        self.send_response(200)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def serve_health(self):
        """–û—Ç–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        self.send_response(200)
        self.send_header('Content-Type', 'text/plain; charset=utf-8')
        self.end_headers()
        self.wfile.write(b"healthy\n")
    
    def serve_status(self):
        """–û—Ç–¥–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç–∞—Ç—É—Å–∞"""
        self.serve_index()
    
    def serve_api_status(self):
        """–û—Ç–¥–∞–µ—Ç JSON —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status_data = {
                "status": "running",
                "uptime": "0:00:00",
                "version": "1.0.0",
                "timestamp": datetime.now().isoformat(),
                "metrics": {
                    "cpu": 0,
                    "memory": 0,
                    "disk": 0
                },
                "components": {
                    "slack": "unknown",
                    "clickup": "unknown",
                    "telegram": "unknown"
                }
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if self.monitor:
                try:
                    current_status = self.monitor.get_current_status()
                    status_data["metrics"]["cpu"] = current_status.get('cpu_usage', 0)
                    status_data["metrics"]["memory"] = current_status.get('memory_usage', 0)
                    status_data["metrics"]["disk"] = current_status.get('disk_usage', 0)
                except:
                    pass
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if self.analyzer:
                try:
                    status_data["components"]["slack"] = "active" if hasattr(self.analyzer, 'slack_integration') else "inactive"
                    status_data["components"]["clickup"] = "active" if hasattr(self.analyzer, 'clickup_integration') else "inactive"
                    status_data["components"]["telegram"] = "active" if hasattr(self.analyzer, 'telegram_bot') else "inactive"
                except:
                    pass
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json; charset=utf-8')
            self.end_headers()
            self.wfile.write(json.dumps(status_data, ensure_ascii=False, indent=2).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def serve_api_metrics(self):
        """–û—Ç–¥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            metrics_data = {
                "timestamp": datetime.now().isoformat(),
                "recent_logs": []
            }
            
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
            try:
                if os.path.exists('logs/main.log'):
                    with open('logs/main.log', 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                        recent_lines = lines[-10:] if len(lines) > 10 else lines
                        metrics_data["recent_logs"] = [line.strip() for line in recent_lines]
            except:
                pass
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json; charset=utf-8')
            self.end_headers()
            self.wfile.write(json.dumps(metrics_data, ensure_ascii=False, indent=2).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    def serve_api_problems(self):
        """–û—Ç–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º"""
        try:
            problems_data = {
                "total": 0,
                "problems": [],
                "timestamp": datetime.now().isoformat()
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if self.analyzer:
                try:
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
                    pass
                except:
                    pass
            
            self.send_response(200)
            self.send_header('Content-Type', 'application/json; charset=utf-8')
            self.end_headers()
            self.wfile.write(json.dumps(problems_data, ensure_ascii=False, indent=2).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º: {e}")
    
    def serve_static_file(self, path):
        """–û—Ç–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
        try:
            file_path = path[1:]  # –£–±–∏—Ä–∞–µ–º /static/
            if os.path.exists(file_path):
                with open(file_path, 'rb') as f:
                    content = f.read()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                if file_path.endswith('.css'):
                    content_type = 'text/css'
                elif file_path.endswith('.js'):
                    content_type = 'application/javascript'
                elif file_path.endswith('.png'):
                    content_type = 'image/png'
                elif file_path.endswith('.jpg') or file_path.endswith('.jpeg'):
                    content_type = 'image/jpeg'
                else:
                    content_type = 'text/plain'
                
                self.send_response(200)
                self.send_header('Content-Type', content_type)
                self.end_headers()
                self.wfile.write(content)
            else:
                self.serve_404()
        except Exception as e:
            self.send_error(500, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    def serve_404(self):
        """–û—Ç–¥–∞–µ—Ç 404 –æ—à–∏–±–∫—É"""
        self.send_response(404)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.end_headers()
        
        html = """
        <!DOCTYPE html>
        <html>
        <head><title>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title></head>
        <body>
            <h1>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
            <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
            <a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </body>
        </html>
        """
        self.wfile.write(html.encode('utf-8'))
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∏—à–∏–Ω—ã"""
        pass

def run_web_server(port=8000):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
    try:
        server = HTTPServer(('', port), BotAssistantHandler)
        print(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        print(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:{port}")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    import sys
    
    port = 8000
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
        except ValueError:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 8000")
    
    run_web_server(port)