import os
import time
import telebot
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from problem_analyzer import ProblemAnalyzer
from google_sheets_manager import GoogleSheetsManager
from slack_integration import SlackIntegration
from clickup_integration import ClickUpIntegration

class TelegramBot:
    def __init__(self, token: str = None, analyzer: ProblemAnalyzer = None, 
                 sheets_manager: GoogleSheetsManager = None, 
                 slack_integration: SlackIntegration = None,
                 clickup_integration: ClickUpIntegration = None):
        self.token = token or os.getenv("TELEGRAM_TOKEN")
        self.bot = telebot.TeleBot(self.token) if self.token else None
        self.analyzer = analyzer
        self.sheets_manager = sheets_manager
        self.slack_integration = slack_integration
        self.clickup_integration = clickup_integration
        self.authorized_users = self._load_authorized_users()
        
        if self.bot:
            self.register_handlers()
    
    def _load_authorized_users(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        authorized_users = os.getenv("TELEGRAM_AUTHORIZED_USERS", "")
        if authorized_users:
            return [user.strip() for user in authorized_users.split(",")]
        return []
    
    def _is_authorized(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        if not self.authorized_users:
            return True  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –∑–∞–¥–∞–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
        return str(user_id) in self.authorized_users
    
    def _safe_text(self, message) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            return getattr(message, 'text', None) or getattr(message, 'caption', None) or ""
        except Exception:
            return ""
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        if not self.bot:
            return
        
        @self.bot.message_handler(commands=['start', 'help'])
        def handle_start(message):
            if not self._is_authorized(message.from_user.id):
                self.bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            help_text = """
ü§ñ –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º –∏ –∑–∞–¥–∞—á

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/report - –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
/problems - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
/forgotten - –ó–∞–±—ã—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
/sync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
/cleanup - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
            """
            self.bot.reply_to(message, help_text.strip())
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
            if self.sheets_manager:
                self.sheets_manager.log_message(message, "telegram")
        
        @self.bot.message_handler(commands=['status'])
        def handle_status(message):
            if not self._is_authorized(message.from_user.id):
                return
            
            try:
                status_text = "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
                
                # –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
                if self.analyzer:
                    report = self.analyzer.generate_report()
                    status_text += f"üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                    status_text += f"üìà –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {report['total_problems']}\n"
                    status_text += f"üÜï –ù–æ–≤—ã–µ: {report['by_status'].get('new', 0)}\n"
                    status_text += f"‚ö° –í —Ä–∞–±–æ—Ç–µ: {report['by_status'].get('in_progress', 0)}\n"
                    status_text += f"‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ: {report['by_status'].get('resolved', 0)}\n"
                    status_text += f"üîÑ –î—É–±–ª–∏–∫–∞—Ç—ã: {report['by_status'].get('duplicate', 0)}\n\n"
                else:
                    status_text += "üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º: ‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω\n\n"
                
                # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
                if self.slack_integration and self.slack_integration.token:
                    status_text += "üí¨ Slack –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
                else:
                    status_text += "üí¨ Slack –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞\n"
                
                if self.clickup_integration and self.clickup_integration.token:
                    status_text += "üìã ClickUp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
                else:
                    status_text += "üìã ClickUp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞\n"
                
                if self.sheets_manager and self.sheets_manager.sheet:
                    status_text += "üìä Google Sheets: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω\n"
                else:
                    status_text += "üìä Google Sheets: ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
                
                status_text += f"\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
                self.bot.reply_to(message, status_text)
                
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        @self.bot.message_handler(commands=['report'])
        def handle_report(message):
            if not self._is_authorized(message.from_user.id):
                return
            
            try:
                if not self.analyzer:
                    self.bot.reply_to(message, "‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                
                report = self.analyzer.generate_report()
                
                report_text = "üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º:\n\n"
                report_text += f"üî¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {report['total_problems']}\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                report_text += "üìã –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
                for status, count in report['by_status'].items():
                    status_emoji = {
                        'new': 'üÜï',
                        'in_progress': '‚ö°',
                        'resolved': '‚úÖ',
                        'duplicate': 'üîÑ'
                    }.get(status, 'üìå')
                    report_text += f"  {status_emoji} {status}: {count}\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                report_text += "\nüö® –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:\n"
                for priority, count in report['by_priority'].items():
                    priority_emoji = {
                        1: 'üî¥',
                        2: 'üü†',
                        3: 'üü°',
                        4: 'üü¢',
                        5: '‚ö™'
                    }.get(priority, 'üìå')
                    report_text += f"  {priority_emoji} {priority}: {count}\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                report_text += "\nüì° –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:\n"
                for source, count in report['by_source'].items():
                    source_emoji = {
                        'slack': 'üí¨',
                        'clickup': 'üìã',
                        'telegram': 'ü§ñ'
                    }.get(source, 'üìå')
                    report_text += f"  {source_emoji} {source}: {count}\n"
                
                report_text += f"\n‚è∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report['generated_at']}"
                
                self.bot.reply_to(message, report_text)
                
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        
        @self.bot.message_handler(commands=['problems'])
        def handle_problems(message):
            if not self._is_authorized(message.from_user.id):
                return
            
            try:
                if not self.analyzer:
                    self.bot.reply_to(message, "‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                
                # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
                args = self._safe_text(message).split()[1:] if len(self._safe_text(message).split()) > 1 else []
                
                if args and args[0] in ['new', 'in_progress', 'resolved', 'duplicate']:
                    status = args[0]
                    problems = self.analyzer.get_problems_by_status(status)
                    title = f"üìã –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}"
                else:
                    problems = self.analyzer.get_problems_by_status()
                    title = "üìã –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"
                
                if not problems:
                    self.bot.reply_to(message, f"üì≠ {title}\n\n–ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_problems = problems[:10]
                
                problems_text = f"{title}\n\n"
                
                for i, problem in enumerate(display_problems, 1):
                    priority_emoji = {
                        1: 'üî¥',
                        2: 'üü†',
                        3: 'üü°',
                        4: 'üü¢',
                        5: '‚ö™'
                    }.get(problem.priority, 'üìå')
                    
                    status_emoji = {
                        'new': 'üÜï',
                        'in_progress': '‚ö°',
                        'resolved': '‚úÖ',
                        'duplicate': 'üîÑ'
                    }.get(problem.status, 'üìå')
                    
                    problems_text += f"{i}. {priority_emoji} {status_emoji} {problem.title[:50]}...\n"
                    problems_text += f"   üë§ {problem.user} | üìÖ {problem.timestamp.strftime('%m-%d %H:%M')}\n"
                    problems_text += f"   üè∑Ô∏è {', '.join(problem.tags[:3])}\n\n"
                
                if len(problems) > 10:
                    problems_text += f"... –∏ –µ—â–µ {len(problems) - 10} –ø—Ä–æ–±–ª–µ–º"
                
                self.bot.reply_to(message, problems_text)
                
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º: {e}")
        
        @self.bot.message_handler(commands=['forgotten'])
        def handle_forgotten(message):
            if not self._is_authorized(message.from_user.id):
                return
            
            try:
                if not self.analyzer:
                    self.bot.reply_to(message, "‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                args = self._safe_text(message).split()[1:] if len(self._safe_text(message).split()) > 1 else []
                days = int(args[0]) if args and args[0].isdigit() else 7
                
                problems = self.analyzer.get_forgotten_problems(days)
                
                if not problems:
                    self.bot.reply_to(message, f"‚úÖ –ó–∞–±—ã—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
                
                forgotten_text = f"‚è∞ –ó–∞–±—ã—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π):\n\n"
                
                for i, problem in enumerate(problems[:10], 1):
                    priority_emoji = {
                        1: 'üî¥',
                        2: 'üü†',
                        3: 'üü°',
                        4: 'üü¢',
                        5: '‚ö™'
                    }.get(problem.priority, 'üìå')
                    
                    forgotten_text += f"{i}. {priority_emoji} {problem.title[:50]}...\n"
                    forgotten_text += f"   üë§ {problem.user} | üìÖ {problem.last_updated.strftime('%m-%d %H:%M')}\n"
                    forgotten_text += f"   üè∑Ô∏è {', '.join(problem.tags[:3])}\n\n"
                
                if len(problems) > 10:
                    forgotten_text += f"... –∏ –µ—â–µ {len(problems) - 10} –∑–∞–±—ã—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º"
                
                self.bot.reply_to(message, forgotten_text)
                
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±—ã—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º: {e}")
        
        @self.bot.message_handler(commands=['sync'])
        def handle_sync(message):
            if not self._is_authorized(message.from_user.id):
                return
            
            try:
                if not self.sheets_manager or not self.analyzer:
                    self.bot.reply_to(message, "‚ùå Google Sheets –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
                    return
                
                self.bot.reply_to(message, "üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets...")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
                all_problems = self.analyzer.get_problems_by_status()
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
                self.sheets_manager.sync_problems_to_sheets(all_problems)
                self.sheets_manager.update_dashboard(self.analyzer)
                
                self.bot.reply_to(message, f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_problems)} –ø—Ä–æ–±–ª–µ–º")
                
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        
        @self.bot.message_handler(commands=['cleanup'])
        def handle_cleanup(message):
            if not self._is_authorized(message.from_user.id):
                return
            
            try:
                if not self.analyzer:
                    self.bot.reply_to(message, "‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                args = self._safe_text(message).split()[1:] if len(self._safe_text(message).split()) > 1 else []
                days = int(args[0]) if args and args[0].isdigit() else 90
                
                self.bot.reply_to(message, f"üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                deleted_count = self.analyzer.cleanup_old_data(days)
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –≤ Google Sheets
                if self.sheets_manager:
                    self.sheets_manager.cleanup_old_logs(30)
                
                self.bot.reply_to(message, f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π")
                
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        
        @self.bot.message_handler(commands=['restart'])
        def handle_restart(message):
            if not self._is_authorized(message.from_user.id):
                return
            
            try:
                self.bot.reply_to(message, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
                import threading
                
                if self.slack_integration:
                    slack_thread = threading.Thread(
                        target=self.slack_integration.run_initial_analysis,
                        daemon=True
                    )
                    slack_thread.start()
                
                if self.clickup_integration:
                    clickup_thread = threading.Thread(
                        target=self.clickup_integration.run_initial_analysis,
                        daemon=True
                    )
                    clickup_thread.start()
                
                self.bot.reply_to(message, "‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        
        @self.bot.message_handler(func=lambda message: True)
        def echo_message(message):
            if not self._is_authorized(message.from_user.id):
                return
            
            text = self._safe_text(message)
            if text:
                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
                if self.analyzer and len(text) > 3:
                    similar_problems = self.analyzer.find_similar_problems(text, threshold=0.3)
                    
                    if similar_problems:
                        response = f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text}':\n\n"
                        for problem_id, similarity in similar_problems[:5]:
                            problem = next((p for p in self.analyzer.get_problems_by_status() if p.id == problem_id), None)
                            if problem:
                                response += f"üìå {problem.title[:50]}...\n"
                                response += f"   –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f}\n"
                                response += f"   –°—Ç–∞—Ç—É—Å: {problem.status}\n\n"
                        
                        if len(similar_problems) > 5:
                            response += f"... –∏ –µ—â–µ {len(similar_problems) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                        
                        self.bot.reply_to(message, response)
                    else:
                        self.bot.reply_to(message, f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    self.bot.reply_to(message, "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π. /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
            if self.sheets_manager:
                self.sheets_manager.log_message(message, "telegram")
    
    def run_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        if not self.bot:
            print("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)")
            return
        
        backoff_seconds = 5
        while True:
            try:
                print("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
                self.bot.polling(none_stop=True, interval=0, timeout=60)
                backoff_seconds = 5
            except Exception as e:
                is_api_exc = hasattr(telebot, 'apihelper') and isinstance(e, getattr(telebot.apihelper, 'ApiTelegramException', Exception))
                if is_api_exc and getattr(e, 'error_code', None) == 409:
                    print("[Telegram] 409 Conflict: –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç–∞–Ω—Å getUpdates. –†–µ—Ç—Ä–∞—é –ø–æ–∑–∂–µ...")
                    time.sleep(min(backoff_seconds, 300))
                    backoff_seconds = min(backoff_seconds * 2, 300)
                    continue
                print(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
                time.sleep(min(backoff_seconds, 60))
                backoff_seconds = min(backoff_seconds * 2, 60)
    
    def send_notification(self, text: str, chat_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
        if not self.bot:
            return False
        
        try:
            if chat_id:
                self.bot.send_message(chat_id, text)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_id in self.authorized_users:
                    try:
                        self.bot.send_message(user_id, text)
                    except Exception:
                        continue
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_critical_alert(self, problem):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ"""
        if not self.bot:
            return
        
        alert_text = f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê!\n\n"
        alert_text += f"üìå {problem.title}\n"
        alert_text += f"üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {problem.priority}\n"
        alert_text += f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {problem.source}\n"
        alert_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {problem.user}\n"
        alert_text += f"‚è∞ –í—Ä–µ–º—è: {problem.timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n"
        alert_text += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {problem.category}\n\n"
        alert_text += f"–¢—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!"
        
        self.send_notification(alert_text)